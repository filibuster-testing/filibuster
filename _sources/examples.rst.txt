Examples
========

Cinema Examples
---------------

``cinema-1``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
The first example, which we are calling ``cinema-1``, comes from `a tutorial on building 
microservices in Flask <https://codeahoy.com/2016/07/10/writing-microservices-in-python-using-flask/>`_.
The ``cinema-1`` example contains 4 services: ``bookings``, ``movies``, ``showtimes``, and ``users``,
where:

* ``bookings``: contains information about bookings for each client;
* ``movies``: contains detailed information about each movie;
* ``showtimes``: contains information about shows for each date; and
* ``users``: that aggregates information about movies that a particular user has bookings for.

.. image:: /_static/diagrams/cinema-1.jpg

Fault Analysis
^^^^^^^^^^^^^^
With ``cinema-1``, the most interesting service to consider is the ``users`` service, as it 
has a dependency on both the ``bookings`` and ``movies`` services operating correctly. For users
to retrieve a user's bookings information, it first retrieves information from the ``bookings``
service and then retrieves information from the ``movies`` service based on the information
retrieved from the ``bookings`` service. If no information can be retrieved from the ``bookings``
service (the user doesn't have any movie bookings or that the call failed/timed out/errored),
no call is made to the ``movies`` service. This is a simple example of one service calling multiple
services in a sequence. There is a dependency among the calls: if one call fails, any subsequent
calls will not be issued.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
In this pattern, let :math:`k_i` be the number of different ways that the `i`-th service can fail, 
and let :math:`n` be the total number of calls made. Using this, the number of tests that Filibuster
should execute should be: :math:`k_1 + k_2 + ... + k_n`.

As ``bookings`` can fail 5 ways, and ``movies`` can fail 4 ways, the number of tests we expect is 
:math:`1 + 5 + 4 = 10`. This is the exact number executed by Filibuster.


``cinema-2``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, ``cinema-1`` is reorganized so that ``users`` first calls ``bookings`` and then 
``bookings`` calls ``movies``.

.. image:: /_static/diagrams/cinema-2.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is an example of a chain of calls. The first call triggers the second call and results are 
forwarded back.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
In this pattern, let :math:`n` be the number of edges (calls) in the chain, and let :math:`k_i` be the number 
of different ways that the :math:`i`-th service can fail. This means that the number of tests executed 
by Filibuster should be :math:`k_1 + k_2 + ... + k_n`. As ``bookings`` can fail 5 ways, and ``movies`` can 
fail 4 ways, we should execute :math:`1 + 4 + 5 = 10` tests, the exact number executed by Filibuster 
(without dynamic reduction.)

However, we're able to avoid one execution through dynamic reduction. To understand why, we provide
the following reasoning.

By injecting a ``Timeout`` or ``ConnectionError`` exception for the call from the ``bookings`` service
to the ``movies`` service, we cause the ``bookings`` service to return a ``503 Service Unavailable``
response back to the ``users`` service. Therefore, since we have already seen the effect on the 503 error
at the ``users`` service, when returned from the ``bookings`` service, we do not need to directly inject
the 503 error, eliminating one possible test. With dynamic reduction enabled, we see this effect with 
the Filibuster output: :math:`1 + 3 + 5 = 9` tests.


``cinema-3``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, based on ``cinema-2``, we move the call made from the ``users`` service to the 
``bookings`` service into a retry loop (with a single retry.)

.. image:: /_static/diagrams/cinema-3.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is an example of a retry loop.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
Similar to previous examples, ``bookings`` can fail 5 ways, and ``movies`` can fail 4 ways. 
However, now that the call from ``users`` to ``bookings`` has been placed in a loop, we have to 
consider those calls failing multiple times. Therefore, we should consider the following:

* first, we know that without a retry loop (``cinema-2``) we need to test 10 executions (10):
* next, we have to additionally consider the first iteration of the loop failing (9); and
* we have to also consider all possible outcomes of the second iteration of the loop (1 success, 9 failures = 10).

This results in :math:`(1 + 9 + (9 \times 10)) = 91`, the number of tests executed by Filibuster (without 
dynamic reduction.)

We can use the same reasoning as we used in ``cinema-2`` to identify how many tests will be 
reduced: we don't need to inject faults on services directly when that failure is previously 
generated by injecting faults on one or more of its dependencies.

Therefore, we consider the following the minimum number of test executions that are required to 
cover the entire fault space:

* the passing execution (1); and
* exhaustion of the first loop (5 outcomes: 3 status codes, 2 exceptions) where the second loop succeeds (5); and
* exhaustion of the first loop (5 outcomes: 3 status codes, 2 exceptions) with exhaustion of the second loop (6 outcomes: 3 status codes, 2 exceptions, 1 success) (6); and
* combinations of all possible outcomes of the movies service: (4 errors, 1 success = :math:`5 \times 5 = 25`).

This results in: :math:`1 + 5 + 6 + 25 = 37` tests. This is precisely the number of tests Filibuster 
executes with dynamic reduction.


``cinema-4``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, based on ``cinema-2``, each service calls to a remote service before calling a 
dependent service. Each of these calls made to remote services can fail without affecting the 
response. Specifically:

* ``users`` retrieves information from IMDB;
* ``bookings`` retrieves information from Fandango; and
* ``movies`` retrieves information from Rotten Tomatoes.

.. image:: /_static/diagrams/cinema-4.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is not a canonical example of any particular pattern, but a composition of the first two patterns: 
the sequence and chain. More specifically, this example contains a chain of sequences of calls:

* users ->
   * IMDB
   * bookings ->
      * Fandango
      * movies ->
         * Rotten Tomatoes

In this particular example, none of the calls to remote services impact the chain; however, a failure
of any non-remote services cause the chain to abort immediately, as seen in ``cinema-2``.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
In order to understand what tests Filibuster needs to execute for this example, we can start by building
upon the formula we had for chains of calls.

No Reduction
''''''''''''
We start by knowing that ``bookings`` is called from ``users`` and can fail 5 ways; we also know that 
``movies`` is called by ``bookings`` and can fail 4 ways. Therefore, we know that we should start off 
with the following: :math:`1 + 5 + 4 = 10`. However, this doesn't account for the remote calls. 
Therefore, we have to consider what impact having sequences in each service makes on this formula.

**IMDB**

Let's consider first IMDB. We know that the call to IMDB will always happen, and it's outcome will not
impact whether we make the call to ``bookings`` from the ``users`` service. Since IMDB has two possible 
outcomes (failure with ``ConnectionError`` or success), this alters our formula:

.. math::
    1 + (2 \times 5) + 4

We put the 2 before the 5 in the multiplication to indicate that the call to IMDB occurs before the 
call to `bookings`: this is done to help the reader.

However, we also need to consider that we will try the combination of all possible outcomes of the 
call to IMDB with the ways that the `movies` service can fail. Again, this alters the formula:

.. math::
    1 + (2 \times 5) + (4 \times (2))

We put the 2 in parentheses after the 4 in the multiplication to indicate that we are referencing 
combinations with an earlier failure. Again, this is done to help the reader.

Finally, we have to consider the failure of IMDB in isolation. We can alter the formula further:

.. math::
    1 + (2 \times 5) + (4 \times (2)) + 1 = 20

We can rewrite this clearer with the following form:

.. math::
    &passing\ + \\
    &(imdb_{outcomes}\ \times\ bookings_{failures})\ + \\
    &(movies_{failures}\ \times\ imdb_{outcomes})\ + \\
    &imdb_{failure\ only} \\
    &=\ 20

**Fandango**

When we consider the call that ``bookings`` makes to Fandango, we have to follow the same process.

First, we need to consider the Fandango outcomes, as they do not impact if any subsequent calls were
made. This adjusts the formula by adding the Fandango failures to the combinations we try with IMDB and
movie failures.

.. math::
    &passing\ + \\
    &(imdb_{outcomes}\ \times\ bookings_{failures})\ + \\
    &(imdb_{outcomes}\ \times\ movies_{failures}\ \times\ fandango_{failures})\ +\ \\
    &imdb_{failure\ only} \\

Similarly, we have to account for both Fandango failing alone and Fandango failing with IMDB with two adjustments:

.. math::
    &passing\ + \\
    &(imdb_{outcomes}\ \times\ bookings_{failures})\ + \\
    &(imdb_{outcomes}\ \times\ movies_{failures}\ \times\ fandango_{outcomes})\ +\ \\
    &imdb_{failure\ only}\ +\ \\
    &fandango_{failure\ only}\ +\ \\ 
    &(imdb_{failure\ only}\ \times\ fandango_{failure\ only}) \\
    &=\ 30 

**Rotten Tomatoes**

Finally, we have to follow the same process for the call from `movies` to Rotten Tomatoes. First, consider it
in combination with other calls from `movies` -- this happens to be none -- and then it's combination with all
the other remote service calls.

This yields the final adjustment:

.. math::
    &passing\ + \\
    &(imdb_{outcomes}\ \times\ bookings_{failures})\ + \\
    &(imdb_{outcomes}\ \times\ movies_{failures}\ \times\ fandango_{outcomes})\ + \\
    &imdb_{failure\ only}\ + \\
    &fandango_{failure\ only}\ + \\
    &rotten\ tomatoes_{failure\ only}\ + \\
    &(imdb_{failure\ only}\ \times\ fandango_{failure\ only})\ + \\
    &(imdb_{failure\ only}\ \times\ rotten\ tomatoes_{failure\ only})\ + \\
    &(fandango_{failure\ only}\ \times\ rotten\ tomatoes_{failure\ only})\ + \\
    &(imdb_{failure\ only}\ \times\ fandango_{failure\ only}\ \times\ rotten\ tomatoes_{failure\ only}) \\
    &=\ 34

This is the exact number of tests executed by Filibuster (without dynamic pruning.)

Dynamic Reduction
'''''''''''''''''
With dynamic reduction, we have to consider fewer cases.

We consider the following, presenting them in order of execution, which matches the postorder execution
of the application through concolic execution:

* the passing execution (1);
* the ways that Rotten Tomatoes can fail (1);
* the ways that movies can fail (4);
* the ways Fandango can fail combined with the possible failures of movies: :math:`(1 + (4 \times 1) = 5)`;
* the ways that bookings can fail (4); and
* the ways that bookings can fail (5) combined with the possible failures of IMDB: :math:`(1 + (5 \times 1)) = 6`.

This results in: :math:`1 + 1 + 4 + (1 + (4 \times 1)) + 4 + (1 + (5 \times 1)) = 21` tests. This is the number
that Filibuster runs with dynamic reduction.

``cinema-5``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, based on ``cinema-1``, all calls happen regardless of failure. In the event of failure,
a default response is used.

.. image:: /_static/diagrams/cinema-5.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is a simple example of one service calling multiple services without dependencies. All requests
will always be made regardless of failure of previous requests.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
In this pattern, let :math:`k_i` be the number of different ways that the :math:`i`-th service can fail,
and let :math:`n` be the total number of requests made. Then the number of fault-injection tests should be 
:math:`(1+k_1) * (1+k_2) * ... * (1+k_n)`.

Since each request has 4 possible failures, in this case the number of tests executed by Filibuster 
should be :math:`5 \times 5 = 25`. This is the exact number executed by Filibuster.


``cinema-6``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
This example is based on ``cinema-1`` and adds a backup service for the ``bookings`` service: 
``bookings-primary``, replaces ``bookings``, and ``bookings-secondary`` is the backup. The request to 
retrieve the ``bookings`` for a user will issue a request to the ``bookings-secondary`` service if the
``bookings-primary`` service has failed or returns an error. It's important to note that the two bookings
services return different responses when requests are made for the same user: this is an instance of 
eventual consistency between replicas.

.. image:: /_static/diagrams/cinema-6.jpg

Fault Analysis
^^^^^^^^^^^^^^
This illustrates a fallback pattern which is common in microservice architectures.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
This particular example extends ``cinema-1`` and is a combination of two patterns: the fallback and 
sequence patterns. To determine how this can fail, let us first look at the two bookings service. 
According to the formula above, there are :math:`1 + 4 \times 5 = 21` paths, out of which 
:math:`4 \times 4 = 16` end up with an error and 5 end up with a response. In the first 16 paths, 
we don't make the call to ``movies``. We then consider the combinations of the second case (5 paths)
with ``movies`` success/failing (5 ways), which yields :math:`5 \times 5 = 25`. So the total is :math:`25 + 16 = 41`.
This is the exact number executed by Filibuster.


``cinema-7``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, based on ``cinema-6``, we first check that the health check service of the primary 
bookings replica passes before trying to access it.

.. image:: /_static/diagrams/cinema-7.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is a pattern where, depending on the result of a previous request, a later request goes to different
services.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
In this case, we run the same number of tests as we do in ``cinema-6``; however, we also run 4 additional
tests to account for the 4 different failures that are possible for the health check service.

Therefore, :math:`num\ tests_cinema-6 + 4 = 41 + 4 = 45`. This is the exact number executed by Filibuster.


``cinema-8``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, the ``cinema-1`` example is collapsed into a monolith with an API server making 
requests to it using a retry loop, where after the initial request, there is a single retry.

.. image:: /_static/diagrams/cinema-8.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is a bare-bones example of a bounded retry loop.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
Since there are 5 possible outcomes (4 failures for the monolith and 1 success case) and the
second request is only executed if the first fails, we have :math:`(1 + (4 \times 5)) = 21`, which represents
the first passing and the first failing with all possible outcomes of the second. This is the exact
number executed by Filibuster.


``cinema-9``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
In this example, the ``cinema-1`` example is collapsed into a monolith with an API server making
requests to it using a quorum replication pattern: :math:`N` requests (in this case, :math:`N = 3`)
are first issued and based on the responses the user request is successful if :math:`(N / 2) + 1`
responses are received at the API server, after waiting for all.

.. image:: /_static/diagrams/cinema-9.jpg

Fault Analysis
^^^^^^^^^^^^^^
This is a pattern commonly found in quorum replication where you issue the same request multiple
times and ensure that all the responses are the same by counting response votes for the answer.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
Since there are 5 possible outcomes (4 failures for the monolith and 1 success case): 
:math:`5 \times 5 \times 5 = 125`. This is the number that Filibuster executes.


Industry Examples
-----------------
You can refer to the readme within the top level directory of each industry example for a more 
detailed outline of the services in that example.

``audible``
~~~~~~~~~~~~
Description
^^^^^^^^^^^
This diagram was taken from the `AWS re:Invent 2018 talk by Audible <https://www.youtube.com/watch?v=7uJG3oPw_AA>`_
titled *Chaos Engineering and Scalability at Audible.com*. This is a highly-simplified view of the actual architecture used at Audible.

.. image:: /_static/diagrams/audible.jpg

Fault Analysis
^^^^^^^^^^^^^^
The bug presented in the talk can be described in three stages.

1. In the first stage, there is an inconsistent content upload. ``audio-assets`` and ``asset-metadata`` (XML chapter descriptions) are not uploaded atomically. In the talk, an audiobook had a success upload in ``audio-assets`` but failed to upload to ``asset-metadata``. This results in the system being in an inconsistent state.
2. In the second stage, a user attempts to access this content. The ``content-delivery-service`` calls ``audible-download-service``, where are calls succeed, and then ``content-delivery-service`` calls ``audio-assets`` and ``asset-metadata``. The final call to ``asset-metadata`` returned an error because the chapter description was missing. The application programmer assumed that ``asset-metadata`` always contains the chapter description for the requested audiobook (after initial checks have passed), so there is no appropriate error handling code. As a result, ``content-delivery-service`` returns a generic ``500 Internal Server Error``.
3. In the third stage, both the system and the user responds to this generic error by initiating retries. Each retry makes all the previous requests again (and failing at ``asset-metadata`` again). This fault causes the system to perform work that will be abandoned, manifesting as system failure when all available compute capacity is exhausted.

We simulated the dormant fault by have an environment variable ``BAD_METADATA=1`` in ``asset-metadata``.
When the environment variable is set, this service always returns a ``404``. The other faults which exhaust
node capacity needs to be simulated in AWS.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^

No Reduction
''''''''''''

First, let's consider the ways each service can fail:

* ``content-delivery-engine`` can fail 4 ways: 2 exceptions and 2 error codes (any abort entire request);
* ``content-delivery-service`` can fail 6 ways: 2 exceptions and 4 error codes (any abort entire request);
   * ``audible-download-service`` can fail 6 ways: 2 exceptions and 4 error codes;
      * ``ownership`` can fail 5 ways: 2 exceptions, 3 error codes (any abort entire request);
      * ``activation`` can fail 4 ways: 2 exceptions, 2 status codes (any abort entire request);
      * ``stats`` can fail 3 ways: 2 exceptions, 1 status codes (doesn't impact request);
   * ``asset-metadata`` can fail 5 ways: 2 exceptions, 3 status codes (any abort entire request); and
   * ``audio-assets`` can fail 5 ways: 2 exceptions, 3 status codes (any abort entire request).

First, we have to consider the impact of ``content-delivery-engine`` failures and the passing execution.

.. math::
    1 + 4 = 5

Next, we consider ``content-delivery-service`` failures, where it makes no other requests.

.. math::
    1 + 4 + 6 = 11

Next, failures of the ``audible-download-service`` in isolation.

.. math::
    1 + 4 + 6 + 6 = 17

Next, we have to consider the failures of its dependencies (``ownership``, ``activation``, and ``stats``).

.. math::
    &1\ +\ 4\ +\ 6\ +\ 6\ +\ 5\ =\ 22 \\
    &1\ +\ 4\ +\ 6\ +\ 6\ +\ (5\ +\ 4)\ =\ 26 \\
    &1\ +\ 4\ +\ 6\ +\ 6\ +\ (5\ +\ 4\ +\ 3)\ =\ 29

Now, we need to consider the additional requests that occur from ``content-delivery-service``.
``asset-metadata`` can fail 5 ways, but we also need to consider it's failures in combination with 
``stats``, as ``stats`` can fail and have no impact on whether this call is made. Therefore, we'll
consider the way ``stats`` can fail with all possible outcomes (3 * 6).

.. math::
    1 + 4 + 6 + 6 + (5 + 4 + 3) + (5 + (6 \times 3)) = 49

Finally, we look at audio_assets, which is only called when the call to ``asset-metadata`` is successful,
again with all combination of how ``stats`` -- called before it with no impact on the request -- can fail
with it. We no longer consider all possible outcomes of ``asset-metadata``, but only consider the failures
because it must succeed for the ``audio-assets`` call to be made.

.. math::
    1 + 4 + 6 + 6 + (5 + 4 + 3) + (5 + (5 \times 3)) + (5 + (5 \times 3)) = 69

This is the number of tests executed with Filibuster with no reduction.

Dynamic Reduction
'''''''''''''''''
With dynamic reduction, we can remove the following tests:

* 4 tests of the ``content-delivery-service``: ``404``, ``403``, ``500``, ``504``, as injecting faults on its dependencies causes these errors to happen;
* 4 tests of the ``audible-download-service``: ``403``, ``404``, ``500``, ``503``, as injecting faults on its dependencies causes these errors to happen;
* 15 tests that are the combination of faults from ``stats``, which has no impact on the outcome, combined with the possible failures of ``asset-metadata``; and
* 15 tests that are the combination of faults from ``stats`` combined with the possible failures of ``audio-assets``.

This is 38 tests that do not need to be executed: :math:`4 + 4 + 15 + 15 = 38`. This results in the following.

.. math::
    69 - 38 = 31

This is the number of tests executed with Filibuster with dynamic reduction.


``expedia``
~~~~~~~~~~~
Description
^^^^^^^^^^^
This architecture diagram is taken from the talk from Daniel and Nikos at 
`Automating Chaos Attacks at Expedia <https://www.youtube.com/watch?v=xrtbiyfRvb4>`_
at Chaos Conf 2020. Here is what we implemented.

.. image:: /_static/diagrams/expedia.jpg

Fault Analysis
^^^^^^^^^^^^^^
In this small example, Expedia retrieves reviews for a hotel where reviews are sorted by an ML algorithm. If
that service failed, the *API Gateway* fallbacks to retrieve reviews from another service where they are sorted
by time from most recent to least recent. They validated the fallback using resilience tests. This is a fake 
bug, but shows how they test error handling code for this particular part of their service.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
Given that each service, *review-ml* and *review-time* can each fail four ways, we have to explore :math:`1 + (4 * 4) = 17`
tests. This is the number executed by Filibuster with both dynamic reduction and without reduction.

``mailchimp``
~~~~~~~~~~~~~
Description
^^^^^^^^^^^
This architecture diagram is taken from the talk from Caroline Dickey `Think Big: Chaos Testing a Monolith
<https://www.youtube.com/watch?v=w_IeMAidgpI>`_ at Chaos Conf 2019. Here is what we implemented.


.. image:: /_static/diagrams/mailchimp.jpg

Fault Analysis
^^^^^^^^^^^^^^
Here's the list of faults identified from the Mailchimp talk that is relevant in our implementation.

1. Fault #1 - MySQL database instance becomes read-only: Mailchimp expected that when the database became read-only the application would degrade gracefully and alerting would fire. This was mostly true: a majority of the Mailchimp application had application code that gracefully handled this database error; however, one legacy component did not have proper error handling and exposed a database error to the user in the UI.
2. Fault #2 - ``requestmapper`` becomes unavailable. ``requestmapper``, a service for mapping pretty URLs for customer landing pages to internal URLs suddenly becomes unavailable in production.

The description of this bug in the talk is extremely vague; what appears to be happening is the following:

* ``app-server`` makes a request to ``requestmapper`` to get information about the URLs; then
* when ``requestmapper`` service is down, ``app-server`` should handle the error and continue handling the request.

The presenter said that changing the ``503 Service Unavailable`` response to a ``500 Internal Server Error``
fixed the bug, but did not explain why; our best guess is that the application server has specific error
handling for a ``500 Internal Server Error`` and no error handling for the ``503 Service Unavailable``.

We simulated the first fault by setting an environment variable ``DB_READ_ONLY=1``. If set, calls to write to the
DB always returns a ``403 Forbidden``. For the second fault, the current version of the code throws a ``500``
(which the load balancer can handle), but buggy implementation throws a ``503`` (which the load balancer supposedly cannot handle).

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
Let's look at what Filibuster has to consider when testing this application.

No Reduction
''''''''''''

First, we have to consider the ways things can fail:

* ``load-balancer`` can fail with 2 exceptions and 1 error code;
* ``requestmapper`` can fail with 2 exceptions and 1 error code;
* read to ``db-primary`` can fail with 2 exceptions and 1 error code,
   * only issued if ``requestmapper`` succeeds;
* write to ``db-primary`` can fail with 2 exceptions and 2 error codes,
   * only issued if ``db-primary`` call succeeds or fails with an error code;
* read to ``db-secondary`` can fail with 2 exceptions and 2 error codes,
   * only issued if ``db-primary`` read or ``db_primary`` write has failed; then
* write to ``db-secondary`` can fail with 2 exceptions and 2 error codes,
   * only issued if ``db-primary`` read or ``db-primary`` write has failed; and
   * ``db-secondary`` fails with an error code.

Let's start by considering the failures of just the ``load-balancer`` and the ``requestmapper``. In this case, 
we need to consider the ways that each service can fail along with the passing execution.

.. math::
    1 + 3 + 3 = 7

Next, we have to consider the failure of the ``db-primary`` read operation.

.. math::       
    1 + 3 + 3 + 4 = 11

Now, we have to consider what happens when the ``db-primary`` write operation fails. We have to keep in mind the ways that things can fail: if ``db-primary`` read fails with 2 of the 4 errors, it will continue to execute the write operation; otherwise, it will not. This results in the following: :math:`4 + 4 + (2 \times 4)`: ``db-primary`` failures (4), ``db-secondary`` failures (4) and finally the calls in the combination: :math:`(2 \times 4)`.

.. math::
    1 + 3 + 3 + (4 + 4 + (2 \times 4)) = 23

Next, we have to consider the ways that the ``db-secondary`` call can fail. Keep in mind that we have to consider that this call is only made if the ``db-primary`` read fails and db_primary write fails :math:`(4 + 4 + (2 * 4))` combined with the ways that the ``db-secondary`` read can fail (4). This gives us the following.

.. math::
    1 + 3 + 3 + (4 + 4 + (2 \times 4)) + ((4 + 4 + (2 + 2)) \times 4) = 71

Finally, we have to consider the subsequent ``db-secondary`` write call can fail, keeping in mind that it only occurs if the previous errors occur and the ``db_secondary`` read call fails with either 2 status codes; remember, this call itself can fail 4 ways as well. Ths extends the following formula with :math:`((4 + 4 + (2 + 2)) * 4) + (4 + 4 + (2 * 4))` to give us the following.

.. math::
    1 + 3 + 3 + (4 + 4 + (2 \times 4)) + ((4 + 4 + (2 + 2)) \times 4) + 
   ((4 + 4 + (2 + 2)) \times 4) + (4 + 4 + (2 \times 4)) = 135

This is the number that Filibuster runs without pruning.

Dynamic Reduction
'''''''''''''''''
With dynamic reduction, we can only reduce 1 execution: the execution where we inject a ``500 Internal Server Error``
returned by the ``app-server`` to the ``load-balancer``, as injecting any of the ``requestmapper`` failures, or
certain combinations of the ``db-primary`` and ``db-secondary`` failures cause this service to return this error already.

This results in a total of :math:`135 - 1 = 134`, the number that Filibuster runs with dynamic reduction.

``netflix``
~~~~~~~~~~~
Description
^^^^^^^^^^^
The basis of the Netflix example comes from `a talk <https://www.youtube.com/watch?v=Q4nniyAarbs>`_ by Casey 
Rosenthal and `this talk <https://www.youtube.com/watch?v=qyzymLlj9ag>`_ from Nora Jones. These talks only show
us a subset of the services that Netflix uses and one example of fallback behavior (e.g., recommendations) so we
added additional fallback behavior that follows the same strategy and intuition, but isn't the actual fallback
behavior of Netflix, as that information is not publically available.

The diagram captures the microservices called when a client loads its homepage, which consists of multiple parts.

.. image:: /_static/diagrams/netflix.jpg

Fault Analysis
^^^^^^^^^^^^^^
The Netflix example contains three faults that can be activated using an environment variable ``NETFLIX_FAULTS=true``.
All three of these faults come from this talk from Nora Jones.

Here are the faults:

1. Call with no fallback: The ``api-server`` service tries to get the user profile from the ``user-profile`` service; however, if this service is unavailable the entire request is failed;
2. Retries to the same server: ``The api-server`` service communicates with the ``my-list`` service to get the user's list; if this service is unavailable, the request is retried against the same service; and
3. Misconfigured timeouts: The ``api-server`` service communicates with the ``user-profile`` service with a 1 second timeout; the ``user-profile`` service communicates with the telemetry service, which has a 20 second timeout; causing the ``user-profile`` service to fail if the ``telemetry`` service request takes over 1 second, but less than 5 -- a failure when there is no actual error.

For fault #3, ``CHECK_TIMEOUTS=true`` also needs to be used to verify timeouts execute correctly.


Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
This is the analysis when the faults are not active.

No Reduction
''''''''''''
First, let us consider the ways each service can fail.

* ``api-gateway`` can fail 5 ways: 3 error codes, 2 exceptions;
* ``user-profile`` can fail 4 ways: 2 error codes, 2 exceptions;
* ``bookmarks`` can fail 4 ways: 2 error codes, 2 exceptions;
* ``telemetry`` can fail 3 ways: 1 error code, 2 exceptions;
* ``trending`` can fail 3 ways: 1 error code; 2 exceptions;
* ``my-list`` can fail 4 ways: 2 error codes, 2 exceptions;
* ``user-recommendations`` can fail 4 ways: 2 error codes, 2 exceptions;
* ``global-recommendations`` can fail 3 ways: 1 error code, 2 exceptions; and
* ``ratings`` can fail 4 ways: 2 error codes, 2 exceptions.

We start with the passing execution (1). We then we need to consider the ways that the call from the ``mobile-client``
to the ``api-gateway`` can fail.

.. math::
    1 + 5 = 6

Next, we consider failures between the ``api-gateway`` and its dependencies. First, the call to ``user-profile``.

.. math::
    1 + 5 + 4 = 10

Then, the call to ``bookmarks``, which is only made if the previous call succeeds.

.. math::
    1 + 5 + 4 + 4 = 14

Now, if ``bookmarks`` fails, we will make a call to ``telemetry``, which is allowed to fail, and then a call to ``trending``.
Considering just the call to ``telemetry`` first, this gives us.

.. math::
    1 + 5 + 4 + 4 + (3 \times 4) = 26

Next, the subsequent call to ``trending``. With this call, we have to consider the following:

* combinations of ``bookmarks`` with ``trending``: :math:`3 \times 4 = 12`
* combinations of ``bookmarks``, ``telemetry`` and ``trending`` together: :math:`3 \times 4 \times 3 = 36`

This gives us the following.

.. math::
    1 + 5 + 4 + 4 + (3 \times 4) + ((3 \times 4) + (3 \times 4 \times 3)) = 74

Next, we have to consider ``my_list``. With this call, we have to consider the following:

* combination of ``bookmarks``, ``telemetry`` and ``my-list``: :math:`4 \times 3 \times 4 = 48`
* combination of ``bookmarks`` and ``my-list``: :math:`4 \times 4 = 16`
* ``my-list`` failing in isolation: 4

This gives us the following.

.. math::
    &1 + 5 + 4 + 4 + (3 \times 4) + ((3 \times 4) + (3 \times 4 \times 3)) + (4 \times 3 \times 4) + (4 \times 4) + 4 \\
    &= 142

Next, ``user-recommendations``, where we have to consider the following:

* combination of ``bookmarks``, ``telemetry and ``user-recommendations``: :math:`4 \times 3 \times 4 = 48`
* combination of ``bookmarks`` and ``user-recommendations``: :math:`4 \times 4 = 16`
* failure of ``user-recommendations`` in isolation: :math:`4`

This gives us the following.

.. math::
    &1 + 5 + 4 + 4 + (3 \times 4) + ((3 \times 4) + (3 \times 4 \times 3)) + (4 \times 3 \times 4) + (4 \times 4) + 4 + \\
    &4 + (4 \times 3 \times 4) + (4 \times 4) \\
    &= 210

Next, ``global-recommendations`` which is called on failure of ``user-recommendations``:

Again:

* combination of ``global-recommendations`` with ``user-recommendations``: :math:`4 \times 3 = 12`
* combination of ``bookmarks``, ``telemetry``, ``user-recommendations`` and ``global-recommendations``: :math:`4 \times 3 \times 4 \times 3 = 144`
* combination of ``bookmarks``, ``user-recommendations``, and ``global-recommendations``: :math:`4 \times 3 \times 4 = 48`

This gives us the following.

.. math::
    &1 + 5 + 4 + 4 + (3 \times 4) + ((3 \times 4) + (3 \times 4 \times 3)) + (4 \times 3 \times 4) + (4 \times 4) + 4 + \\
    &4 + (4 \times 3 \times 4) + (4 \times 4) + \\
    &(4 \times 3) + (4 \times 3 \times 4 \times 3) + (4 \times 3 \times 4) \\
    &= 414

Next, the call to ``trending`` when ``global-recommendations`` fails.

* combination of ``bookmarks``, ``telemetry`` and the second ``telemetry`` call: 4 * 3 * 3 = 36

This yields the following.

.. math::
    &1 + 5 + 4 + 4 + (3 \times 4) + ((3 \times 4) + (3 \times 4 \times 3)) + (4 \times 3 \times 4) + (4 \times 4) + 4 +\\
    &4 + (4 \times 3 \times 4) + (4 \times 4) +\\
    &(4 \times 3) + (4 \times 3 \times 4 \times 3) + (4 \times 3 \times 4) +\\
    &(4 \times 3 \times 3) \\
    &= 450

Finally, the last call to ratings.

* combinations of ``bookmarks``, ``telemetry``, ``user_recommendations``, ``global_recommendations``, and ``ratings``: :math:`4 \times 3 \times 4 \times 3 \times 4 = 576`
* combination of ``bookmarks``, ``user_recommendations``, ``global_recommendations`` and ``ratings``: :math:`(4 \times 4 \times 3 \times 4 = 192)`
* combination of ``bookmarks``, ``user_recomendations`` and ``ratings``: :math:`(4 \times 4 \times 4) = 64`
* combination of ``bookmarks`` and ``ratings``: :math:`(4 \times 4) = 16`
* combination of ``bookmarks`` and ``ratings``: :math:`(4 \times 4) = 16`
* combination of ``user_recommendations``, ``global_recommendations``, ``ratings``: :math:`(4 \times 3 \times 4) = 48`
* combination of ``user_recommendations`` and ``ratings``: :math:`(4 \times 4) = 16`
* combination of ``bookmarks``, ``telemetry``, and ``ratings``: :math:`(4 \times 3 \times 4) = 48`
* combination of ``bookmarks``, ``telemetry``, ``user_recommendations``, ``ratings``: :math:`(4 \times 3 \times 4 \times 4) = 192`
* ratings failing in isolation (:math:`4`)

This results in the following.

.. math::
    &1 + 5 + 4 + 4 + (3 \times 4) + ((3 \times 4) + (3 \times 4 \times 3)) + (4 \times 3 \times 4) + (4 \times 4) + 4 + \\
    &4 + (4 \times 3 \times 4) + (4 \times 4) + \\
    &(4 \times 3) + (4 \times 3 \times 4 \times 3) + (4 \times 3 \times 4) + \\
    &(4 \times 3 \times 3) + \\
    &(4 \times 3 \times 4 \times 3 \times 4) + (4 \times 4 \times 3 \times 4) + (4 \times 4 \times 4) + (4 \times 4) + \\
    &(4 \times 3 \times 4) + (4 \times 4) + (4 \times 3 \times 4) + (4 \times 3 \times 4 \times 4) + 4 \\
    &= 1606

This is the exact number of test executions run by Filibuster with no dynamic reduction.

Dynamic Reduction
'''''''''''''''''
The structure of this application does not lend itself well to dynamic reduction: as, all 
of the calls are made from the top-level and therefore we have to explore all possible 
combinations of failures of almost all the requests.

In this example, we're only able to use dynamic reduction to eliminate injecting status 
code failures between the ``mobile-client`` and the ``app-server``: as, we can test this
behavior indirectly by injecting failures on the ``app-server``'s dependencies.

With Bugs
'''''''''
With bugs, a number of additional tests have to be run. We omit the analysis for brevity. 
Without dynamic reduction, it results in 4670 test executions; with 4721 test executions.

Bug Examples
------------

``bug-1``: remote service unavailability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Description
^^^^^^^^^^^
The first example bug is reported from a senior engineer working on a large internet service; we've
 adapted ``cinema-1`` to contain the bug.

The ``bug-1`` example contains 5 services: ``schema``, ``bookings``, ``movies``, ``showtimes``, 
and ``users``, where:

* ``schema``: contains a schema used to parse a response before talking to other services;
* ``bookings``: contains information about bookings for each client;
* ``movies``: contains detailed information about each movie;
* ``showtimes``: contains information about shows for each date; and
* ``users``: that aggregates information about movies that a particular user has bookings for.

.. image:: /_static/diagrams/bug-1.jpg

Fault Analysis
^^^^^^^^^^^^^^
In this example, a top-level service responsible for routing and handling requests an XML schema
from another service in order to parse the users request. The actual fault is a failure to anticipate
the ``schema`` service as being unavailable, causing the entire request to fail.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
``cinema-1`` ran 9 test executions to explore the failure space: this example introduces 3 more:
2 possible exceptions (e.g., ``Timeout``, ``ConnectionError``) and a ``500 Internal Server Error``
response. Therefore :math:`9 + 3 = 12`, the number of tests executed by Filibuster with and 
without dynamic reduction.


``bug-2``: overload in error handling code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Description
^^^^^^^^^^^
The second example bug is reported from a senior engineer working on a large internet service;
we've adapted ``cinema-1`` to contain the bug.

The ``bug-2`` example contains the 4 services as ``cinema-5``: ``bookings``, ``movies``,
``showtimes``, and ``users``, where:

* ``bookings``: contains information about bookings for each client;
* ``movies``: contains detailed information about each movie;
* ``showtimes``: contains information about shows for each date; and
* ``users``: that aggregates information about movies that a particular user has bookings for.

.. image:: /_static/diagrams/bug-2.jpg

Fault Analysis
^^^^^^^^^^^^^^
In this example, a top-level service has error handling for when one of its dependencies is unavailable;
however, this error handling code performs an expensive operation under a mutex that's shared with all
requests. In the original example, this was a shared mutex in a Kafka client that wrote an entry into
the queue: here, we've replaced that with a floating point operation that takes 2 seconds of CPU under a
similar mutex.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
This example produces the same number of test executions with Filibuster as ``cinema-5`` does: 25.


``bug-3``: retries to same server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Description
^^^^^^^^^^^
This example comes from `this talk <https://www.youtube.com/watch?v=qyzymLlj9ag>`_ from Nora Jones.

The ``bug-2`` example contains the 4 services as ``cinema-1``: ``bookings``, ``movies``, ``showtimes``,
and ``users``, where:

* ``bookings``: contains information about bookings for each client;
* ``movies``: contains detailed information about each movie;
* ``showtimes``: contains information about shows for each date; and
* ``users``: that aggregates information about movies that a particular user has bookings for.

.. image:: /_static/diagrams/bug-3.jpg

Fault Analysis
^^^^^^^^^^^^^^
In this example, we've adapted ``cinema-1`` to add a single retry when the ``bookings`` service is
unavailable to the ``bookings`` service again.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
This example produces the same number of test executions with Filibuster as ``cinema-5`` does: 25.


``bug-4``: incorrectly configured timeouts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Description
^^^^^^^^^^^
This example comes from `this talk <https://www.youtube.com/watch?v=qyzymLlj9ag>`_ from Nora Jones.

The ``bug-4`` example contains 4 services: ``bookings``, ``movies``, ``showtimes``, and ``users``, where:

* ``bookings``: contains information about bookings for each client;
* ``movies``: contains detailed information about each movie;
* ``showtimes``: contains information about shows for each date; and
* ``users``: aggregates information about movies that a particular user has bookings for.

.. image:: /_static/diagrams/bug-4.jpg

Fault Analysis
^^^^^^^^^^^^^^
In this example, based on ``cinema-2``, the top-level service ``users`` is configured with a 
timeout of 1s; however, ``users`` communicates with ``bookings`` and ``bookings`` communicates with
``movies`` with a timeout of 10s. Therefore, the timeout of the ``users`` service isn't sufficient
to deal with delays -- within the allowed timeout -- of the ``movies`` service.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
For this, we should use the ``CHECK_TIMEOUTS=true`` option to verify timeouts are configured
correctly. This produces the same number of test executions as ``cinema-2``, we know that we'll
run 10 test executions using Filibuster without dynamic reduction; with, 9 test executions.

``bug-5``: critical service has no fallback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Description
^^^^^^^^^^^
This example comes from `this talk <https://www.youtube.com/watch?v=qyzymLlj9ag>`_ from Nora Jones.
It's adapted from ``cinema-1``.

The ``bug-5`` example contains 4 services: ``bookings``, ``movies``, ``showtimes``, and ``users``, where:

* ``bookings``: contains information about bookings for each client;
* ``movies``: contains detailed information about each movie;
* ``showtimes``: contains information about shows for each date; and
* ``users``: aggregates information about movies that a particular user has bookings for.


.. image:: /_static/diagrams/bug-5.jpg

Fault Analysis
^^^^^^^^^^^^^^
In this example, the top-level service, ``users``, is responsible for routing and handling requests
from end users, communicates with ``bookings`` from another service in order to fulfill the user's
request. The actual fault is a failure to anticipate the critical ``bookings`` service as being unavailable.
The ``bookings`` service has no fallbacks, and since it is critical the entire request fails.

In this example, the top-level service, ``users``, is responsible for getting information from the
``bookings`` service. The actual fault is a failure to anticipate that the ``bookings`` service 
-- a critical dependency -- is unavailable and no fallback actions are provided. This is effectively
the ``cinema-1`` example.

Filibuster Analysis
^^^^^^^^^^^^^^^^^^^
Same as ``cinema-1``: 9 test executions with Filibuster with and without dynamic reduction.